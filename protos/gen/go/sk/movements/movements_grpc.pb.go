// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: sk/movements/movements.proto

package movements

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovementService_CreateMovement_FullMethodName    = "/sk.movements.MovementService/CreateMovement"
	MovementService_GetMovement_FullMethodName       = "/sk.movements.MovementService/GetMovement"
	MovementService_UpdateMovement_FullMethodName    = "/sk.movements.MovementService/UpdateMovement"
	MovementService_DeleteMovement_FullMethodName    = "/sk.movements.MovementService/DeleteMovement"
	MovementService_ListMovements_FullMethodName     = "/sk.movements.MovementService/ListMovements"
	MovementService_InitializeProduct_FullMethodName = "/sk.movements.MovementService/InitializeProduct"
)

// MovementServiceClient is the client API for MovementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CRUD методы для перемещений
type MovementServiceClient interface {
	CreateMovement(ctx context.Context, in *CreateMovementRequest, opts ...grpc.CallOption) (*MovementResponse, error)
	GetMovement(ctx context.Context, in *GetMovementRequest, opts ...grpc.CallOption) (*MovementResponse, error)
	UpdateMovement(ctx context.Context, in *UpdateMovementRequest, opts ...grpc.CallOption) (*MovementResponse, error)
	DeleteMovement(ctx context.Context, in *DeleteMovementRequest, opts ...grpc.CallOption) (*DeleteMovementResponse, error)
	ListMovements(ctx context.Context, in *ListMovementsRequest, opts ...grpc.CallOption) (*MovementListResponse, error)
	InitializeProduct(ctx context.Context, in *InitializeProductRequest, opts ...grpc.CallOption) (*InitializeProductResponse, error)
}

type movementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovementServiceClient(cc grpc.ClientConnInterface) MovementServiceClient {
	return &movementServiceClient{cc}
}

func (c *movementServiceClient) CreateMovement(ctx context.Context, in *CreateMovementRequest, opts ...grpc.CallOption) (*MovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovementResponse)
	err := c.cc.Invoke(ctx, MovementService_CreateMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementServiceClient) GetMovement(ctx context.Context, in *GetMovementRequest, opts ...grpc.CallOption) (*MovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovementResponse)
	err := c.cc.Invoke(ctx, MovementService_GetMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementServiceClient) UpdateMovement(ctx context.Context, in *UpdateMovementRequest, opts ...grpc.CallOption) (*MovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovementResponse)
	err := c.cc.Invoke(ctx, MovementService_UpdateMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementServiceClient) DeleteMovement(ctx context.Context, in *DeleteMovementRequest, opts ...grpc.CallOption) (*DeleteMovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovementResponse)
	err := c.cc.Invoke(ctx, MovementService_DeleteMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementServiceClient) ListMovements(ctx context.Context, in *ListMovementsRequest, opts ...grpc.CallOption) (*MovementListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovementListResponse)
	err := c.cc.Invoke(ctx, MovementService_ListMovements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementServiceClient) InitializeProduct(ctx context.Context, in *InitializeProductRequest, opts ...grpc.CallOption) (*InitializeProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeProductResponse)
	err := c.cc.Invoke(ctx, MovementService_InitializeProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovementServiceServer is the server API for MovementService service.
// All implementations must embed UnimplementedMovementServiceServer
// for forward compatibility.
//
// CRUD методы для перемещений
type MovementServiceServer interface {
	CreateMovement(context.Context, *CreateMovementRequest) (*MovementResponse, error)
	GetMovement(context.Context, *GetMovementRequest) (*MovementResponse, error)
	UpdateMovement(context.Context, *UpdateMovementRequest) (*MovementResponse, error)
	DeleteMovement(context.Context, *DeleteMovementRequest) (*DeleteMovementResponse, error)
	ListMovements(context.Context, *ListMovementsRequest) (*MovementListResponse, error)
	InitializeProduct(context.Context, *InitializeProductRequest) (*InitializeProductResponse, error)
	mustEmbedUnimplementedMovementServiceServer()
}

// UnimplementedMovementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovementServiceServer struct{}

func (UnimplementedMovementServiceServer) CreateMovement(context.Context, *CreateMovementRequest) (*MovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovement not implemented")
}
func (UnimplementedMovementServiceServer) GetMovement(context.Context, *GetMovementRequest) (*MovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovement not implemented")
}
func (UnimplementedMovementServiceServer) UpdateMovement(context.Context, *UpdateMovementRequest) (*MovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovement not implemented")
}
func (UnimplementedMovementServiceServer) DeleteMovement(context.Context, *DeleteMovementRequest) (*DeleteMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovement not implemented")
}
func (UnimplementedMovementServiceServer) ListMovements(context.Context, *ListMovementsRequest) (*MovementListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovements not implemented")
}
func (UnimplementedMovementServiceServer) InitializeProduct(context.Context, *InitializeProductRequest) (*InitializeProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeProduct not implemented")
}
func (UnimplementedMovementServiceServer) mustEmbedUnimplementedMovementServiceServer() {}
func (UnimplementedMovementServiceServer) testEmbeddedByValue()                         {}

// UnsafeMovementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovementServiceServer will
// result in compilation errors.
type UnsafeMovementServiceServer interface {
	mustEmbedUnimplementedMovementServiceServer()
}

func RegisterMovementServiceServer(s grpc.ServiceRegistrar, srv MovementServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovementService_ServiceDesc, srv)
}

func _MovementService_CreateMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementServiceServer).CreateMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementService_CreateMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementServiceServer).CreateMovement(ctx, req.(*CreateMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementService_GetMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementServiceServer).GetMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementService_GetMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementServiceServer).GetMovement(ctx, req.(*GetMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementService_UpdateMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementServiceServer).UpdateMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementService_UpdateMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementServiceServer).UpdateMovement(ctx, req.(*UpdateMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementService_DeleteMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementServiceServer).DeleteMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementService_DeleteMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementServiceServer).DeleteMovement(ctx, req.(*DeleteMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementService_ListMovements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMovementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementServiceServer).ListMovements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementService_ListMovements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementServiceServer).ListMovements(ctx, req.(*ListMovementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementService_InitializeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementServiceServer).InitializeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementService_InitializeProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementServiceServer).InitializeProduct(ctx, req.(*InitializeProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovementService_ServiceDesc is the grpc.ServiceDesc for MovementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sk.movements.MovementService",
	HandlerType: (*MovementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovement",
			Handler:    _MovementService_CreateMovement_Handler,
		},
		{
			MethodName: "GetMovement",
			Handler:    _MovementService_GetMovement_Handler,
		},
		{
			MethodName: "UpdateMovement",
			Handler:    _MovementService_UpdateMovement_Handler,
		},
		{
			MethodName: "DeleteMovement",
			Handler:    _MovementService_DeleteMovement_Handler,
		},
		{
			MethodName: "ListMovements",
			Handler:    _MovementService_ListMovements_Handler,
		},
		{
			MethodName: "InitializeProduct",
			Handler:    _MovementService_InitializeProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sk/movements/movements.proto",
}
