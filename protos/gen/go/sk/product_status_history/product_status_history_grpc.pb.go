// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: sk/product_status_history/product_status_history.proto

package product_status_history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductStatusService_CreateStatus_FullMethodName          = "/sk.product_status_history.ProductStatusService/CreateStatus"
	ProductStatusService_GetStatus_FullMethodName             = "/sk.product_status_history.ProductStatusService/GetStatus"
	ProductStatusService_UpdateStatusActive_FullMethodName    = "/sk.product_status_history.ProductStatusService/UpdateStatusActive"
	ProductStatusService_DeleteStatus_FullMethodName          = "/sk.product_status_history.ProductStatusService/DeleteStatus"
	ProductStatusService_ListStatusesByProduct_FullMethodName = "/sk.product_status_history.ProductStatusService/ListStatusesByProduct"
)

// ProductStatusServiceClient is the client API for ProductStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductStatusServiceClient interface {
	CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error)
	UpdateStatusActive(ctx context.Context, in *UpdateStatusActiveRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error)
	DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*DeleteStatusResponse, error)
	ListStatusesByProduct(ctx context.Context, in *ListStatusesByProductRequest, opts ...grpc.CallOption) (*StatusListResponse, error)
}

type productStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductStatusServiceClient(cc grpc.ClientConnInterface) ProductStatusServiceClient {
	return &productStatusServiceClient{cc}
}

func (c *productStatusServiceClient) CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSkStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_CreateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSkStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) UpdateStatusActive(ctx context.Context, in *UpdateStatusActiveRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSkStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_UpdateStatusActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*DeleteStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_DeleteStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) ListStatusesByProduct(ctx context.Context, in *ListStatusesByProductRequest, opts ...grpc.CallOption) (*StatusListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusListResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_ListStatusesByProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductStatusServiceServer is the server API for ProductStatusService service.
// All implementations must embed UnimplementedProductStatusServiceServer
// for forward compatibility.
type ProductStatusServiceServer interface {
	CreateStatus(context.Context, *CreateStatusRequest) (*ProductSkStatusResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*ProductSkStatusResponse, error)
	UpdateStatusActive(context.Context, *UpdateStatusActiveRequest) (*ProductSkStatusResponse, error)
	DeleteStatus(context.Context, *DeleteStatusRequest) (*DeleteStatusResponse, error)
	ListStatusesByProduct(context.Context, *ListStatusesByProductRequest) (*StatusListResponse, error)
	mustEmbedUnimplementedProductStatusServiceServer()
}

// UnimplementedProductStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductStatusServiceServer struct{}

func (UnimplementedProductStatusServiceServer) CreateStatus(context.Context, *CreateStatusRequest) (*ProductSkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (UnimplementedProductStatusServiceServer) GetStatus(context.Context, *GetStatusRequest) (*ProductSkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedProductStatusServiceServer) UpdateStatusActive(context.Context, *UpdateStatusActiveRequest) (*ProductSkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusActive not implemented")
}
func (UnimplementedProductStatusServiceServer) DeleteStatus(context.Context, *DeleteStatusRequest) (*DeleteStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatus not implemented")
}
func (UnimplementedProductStatusServiceServer) ListStatusesByProduct(context.Context, *ListStatusesByProductRequest) (*StatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatusesByProduct not implemented")
}
func (UnimplementedProductStatusServiceServer) mustEmbedUnimplementedProductStatusServiceServer() {}
func (UnimplementedProductStatusServiceServer) testEmbeddedByValue()                              {}

// UnsafeProductStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductStatusServiceServer will
// result in compilation errors.
type UnsafeProductStatusServiceServer interface {
	mustEmbedUnimplementedProductStatusServiceServer()
}

func RegisterProductStatusServiceServer(s grpc.ServiceRegistrar, srv ProductStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductStatusService_ServiceDesc, srv)
}

func _ProductStatusService_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_CreateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).CreateStatus(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_UpdateStatusActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).UpdateStatusActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_UpdateStatusActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).UpdateStatusActive(ctx, req.(*UpdateStatusActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_DeleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).DeleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_DeleteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).DeleteStatus(ctx, req.(*DeleteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_ListStatusesByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusesByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).ListStatusesByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_ListStatusesByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).ListStatusesByProduct(ctx, req.(*ListStatusesByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductStatusService_ServiceDesc is the grpc.ServiceDesc for ProductStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sk.product_status_history.ProductStatusService",
	HandlerType: (*ProductStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStatus",
			Handler:    _ProductStatusService_CreateStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ProductStatusService_GetStatus_Handler,
		},
		{
			MethodName: "UpdateStatusActive",
			Handler:    _ProductStatusService_UpdateStatusActive_Handler,
		},
		{
			MethodName: "DeleteStatus",
			Handler:    _ProductStatusService_DeleteStatus_Handler,
		},
		{
			MethodName: "ListStatusesByProduct",
			Handler:    _ProductStatusService_ListStatusesByProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sk/product_status_history/product_status_history.proto",
}
