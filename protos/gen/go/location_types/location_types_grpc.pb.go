// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: location_types/location_types.proto

package location_types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationTypeService_Create_FullMethodName = "/location_types.LocationTypeService/Create"
	LocationTypeService_Get_FullMethodName    = "/location_types.LocationTypeService/Get"
	LocationTypeService_Update_FullMethodName = "/location_types.LocationTypeService/Update"
	LocationTypeService_Delete_FullMethodName = "/location_types.LocationTypeService/Delete"
	LocationTypeService_List_FullMethodName   = "/location_types.LocationTypeService/List"
)

// LocationTypeServiceClient is the client API for LocationTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationTypeServiceClient interface {
	Create(ctx context.Context, in *CreateLocationTypeRequest, opts ...grpc.CallOption) (*LocationTypeResponse, error)
	Get(ctx context.Context, in *GetLocationTypeRequest, opts ...grpc.CallOption) (*LocationTypeResponse, error)
	Update(ctx context.Context, in *UpdateLocationTypeRequest, opts ...grpc.CallOption) (*LocationTypeResponse, error)
	Delete(ctx context.Context, in *DeleteLocationTypeRequest, opts ...grpc.CallOption) (*DeleteLocationTypeResponse, error)
	List(ctx context.Context, in *ListLocationTypesRequest, opts ...grpc.CallOption) (*LocationTypeListResponse, error)
}

type locationTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationTypeServiceClient(cc grpc.ClientConnInterface) LocationTypeServiceClient {
	return &locationTypeServiceClient{cc}
}

func (c *locationTypeServiceClient) Create(ctx context.Context, in *CreateLocationTypeRequest, opts ...grpc.CallOption) (*LocationTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationTypeResponse)
	err := c.cc.Invoke(ctx, LocationTypeService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTypeServiceClient) Get(ctx context.Context, in *GetLocationTypeRequest, opts ...grpc.CallOption) (*LocationTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationTypeResponse)
	err := c.cc.Invoke(ctx, LocationTypeService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTypeServiceClient) Update(ctx context.Context, in *UpdateLocationTypeRequest, opts ...grpc.CallOption) (*LocationTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationTypeResponse)
	err := c.cc.Invoke(ctx, LocationTypeService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTypeServiceClient) Delete(ctx context.Context, in *DeleteLocationTypeRequest, opts ...grpc.CallOption) (*DeleteLocationTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLocationTypeResponse)
	err := c.cc.Invoke(ctx, LocationTypeService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTypeServiceClient) List(ctx context.Context, in *ListLocationTypesRequest, opts ...grpc.CallOption) (*LocationTypeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationTypeListResponse)
	err := c.cc.Invoke(ctx, LocationTypeService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationTypeServiceServer is the server API for LocationTypeService service.
// All implementations must embed UnimplementedLocationTypeServiceServer
// for forward compatibility.
type LocationTypeServiceServer interface {
	Create(context.Context, *CreateLocationTypeRequest) (*LocationTypeResponse, error)
	Get(context.Context, *GetLocationTypeRequest) (*LocationTypeResponse, error)
	Update(context.Context, *UpdateLocationTypeRequest) (*LocationTypeResponse, error)
	Delete(context.Context, *DeleteLocationTypeRequest) (*DeleteLocationTypeResponse, error)
	List(context.Context, *ListLocationTypesRequest) (*LocationTypeListResponse, error)
	mustEmbedUnimplementedLocationTypeServiceServer()
}

// UnimplementedLocationTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationTypeServiceServer struct{}

func (UnimplementedLocationTypeServiceServer) Create(context.Context, *CreateLocationTypeRequest) (*LocationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLocationTypeServiceServer) Get(context.Context, *GetLocationTypeRequest) (*LocationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLocationTypeServiceServer) Update(context.Context, *UpdateLocationTypeRequest) (*LocationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLocationTypeServiceServer) Delete(context.Context, *DeleteLocationTypeRequest) (*DeleteLocationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLocationTypeServiceServer) List(context.Context, *ListLocationTypesRequest) (*LocationTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLocationTypeServiceServer) mustEmbedUnimplementedLocationTypeServiceServer() {}
func (UnimplementedLocationTypeServiceServer) testEmbeddedByValue()                             {}

// UnsafeLocationTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationTypeServiceServer will
// result in compilation errors.
type UnsafeLocationTypeServiceServer interface {
	mustEmbedUnimplementedLocationTypeServiceServer()
}

func RegisterLocationTypeServiceServer(s grpc.ServiceRegistrar, srv LocationTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocationTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationTypeService_ServiceDesc, srv)
}

func _LocationTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTypeServiceServer).Create(ctx, req.(*CreateLocationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTypeServiceServer).Get(ctx, req.(*GetLocationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTypeServiceServer).Update(ctx, req.(*UpdateLocationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTypeServiceServer).Delete(ctx, req.(*DeleteLocationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationTypeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTypeServiceServer).List(ctx, req.(*ListLocationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationTypeService_ServiceDesc is the grpc.ServiceDesc for LocationTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location_types.LocationTypeService",
	HandlerType: (*LocationTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LocationTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LocationTypeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LocationTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LocationTypeService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LocationTypeService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location_types/location_types.proto",
}
