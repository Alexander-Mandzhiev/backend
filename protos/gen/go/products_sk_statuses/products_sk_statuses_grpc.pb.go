// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: products_sk_statuses/products_sk_statuses.proto

package products_sk_statuses

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductStatusService_Create_FullMethodName          = "/products_sk_statuses.ProductStatusService/Create"
	ProductStatusService_ProductSkStatus_FullMethodName = "/products_sk_statuses.ProductStatusService/ProductSkStatus"
	ProductStatusService_Update_FullMethodName          = "/products_sk_statuses.ProductStatusService/Update"
	ProductStatusService_Delete_FullMethodName          = "/products_sk_statuses.ProductStatusService/Delete"
	ProductStatusService_List_FullMethodName            = "/products_sk_statuses.ProductStatusService/List"
)

// ProductStatusServiceClient is the client API for ProductStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CRUD методы для статусов продукции
type ProductStatusServiceClient interface {
	Create(ctx context.Context, in *CreateProductStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error)
	ProductSkStatus(ctx context.Context, in *GetProductStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error)
	Update(ctx context.Context, in *UpdateProductStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error)
	Delete(ctx context.Context, in *DeleteProductStatusRequest, opts ...grpc.CallOption) (*DeleteProductStatusResponse, error)
	List(ctx context.Context, in *ListProductStatusesRequest, opts ...grpc.CallOption) (*ProductStatusListResponse, error)
}

type productStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductStatusServiceClient(cc grpc.ClientConnInterface) ProductStatusServiceClient {
	return &productStatusServiceClient{cc}
}

func (c *productStatusServiceClient) Create(ctx context.Context, in *CreateProductStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSkStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) ProductSkStatus(ctx context.Context, in *GetProductStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSkStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_ProductSkStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) Update(ctx context.Context, in *UpdateProductStatusRequest, opts ...grpc.CallOption) (*ProductSkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSkStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) Delete(ctx context.Context, in *DeleteProductStatusRequest, opts ...grpc.CallOption) (*DeleteProductStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductStatusResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStatusServiceClient) List(ctx context.Context, in *ListProductStatusesRequest, opts ...grpc.CallOption) (*ProductStatusListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductStatusListResponse)
	err := c.cc.Invoke(ctx, ProductStatusService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductStatusServiceServer is the server API for ProductStatusService service.
// All implementations must embed UnimplementedProductStatusServiceServer
// for forward compatibility.
//
// CRUD методы для статусов продукции
type ProductStatusServiceServer interface {
	Create(context.Context, *CreateProductStatusRequest) (*ProductSkStatusResponse, error)
	ProductSkStatus(context.Context, *GetProductStatusRequest) (*ProductSkStatusResponse, error)
	Update(context.Context, *UpdateProductStatusRequest) (*ProductSkStatusResponse, error)
	Delete(context.Context, *DeleteProductStatusRequest) (*DeleteProductStatusResponse, error)
	List(context.Context, *ListProductStatusesRequest) (*ProductStatusListResponse, error)
	mustEmbedUnimplementedProductStatusServiceServer()
}

// UnimplementedProductStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductStatusServiceServer struct{}

func (UnimplementedProductStatusServiceServer) Create(context.Context, *CreateProductStatusRequest) (*ProductSkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductStatusServiceServer) ProductSkStatus(context.Context, *GetProductStatusRequest) (*ProductSkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSkStatus not implemented")
}
func (UnimplementedProductStatusServiceServer) Update(context.Context, *UpdateProductStatusRequest) (*ProductSkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductStatusServiceServer) Delete(context.Context, *DeleteProductStatusRequest) (*DeleteProductStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductStatusServiceServer) List(context.Context, *ListProductStatusesRequest) (*ProductStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductStatusServiceServer) mustEmbedUnimplementedProductStatusServiceServer() {}
func (UnimplementedProductStatusServiceServer) testEmbeddedByValue()                              {}

// UnsafeProductStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductStatusServiceServer will
// result in compilation errors.
type UnsafeProductStatusServiceServer interface {
	mustEmbedUnimplementedProductStatusServiceServer()
}

func RegisterProductStatusServiceServer(s grpc.ServiceRegistrar, srv ProductStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductStatusService_ServiceDesc, srv)
}

func _ProductStatusService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).Create(ctx, req.(*CreateProductStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_ProductSkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).ProductSkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_ProductSkStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).ProductSkStatus(ctx, req.(*GetProductStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).Update(ctx, req.(*UpdateProductStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).Delete(ctx, req.(*DeleteProductStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStatusService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStatusServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStatusService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStatusServiceServer).List(ctx, req.(*ListProductStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductStatusService_ServiceDesc is the grpc.ServiceDesc for ProductStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products_sk_statuses.ProductStatusService",
	HandlerType: (*ProductStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductStatusService_Create_Handler,
		},
		{
			MethodName: "ProductSkStatus",
			Handler:    _ProductStatusService_ProductSkStatus_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductStatusService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductStatusService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProductStatusService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products_sk_statuses/products_sk_statuses.proto",
}
