// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.1
// source: production_task/production_task.proto

package production_task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestTaskParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartName      string                 `protobuf:"bytes,1,opt,name=part_name,json=partName,proto3" json:"part_name,omitempty"`
	SklId         int32                  `protobuf:"varint,2,opt,name=skl_id,json=sklId,proto3" json:"skl_id,omitempty"`
	DateStart     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	DateEnd       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_end,json=dateEnd,proto3" json:"date_end,omitempty"`
	Search        string                 `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	Page          int32                  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Count         int32                  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestTaskParams) Reset() {
	*x = RequestTaskParams{}
	mi := &file_production_task_production_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTaskParams) ProtoMessage() {}

func (x *RequestTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_production_task_production_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTaskParams.ProtoReflect.Descriptor instead.
func (*RequestTaskParams) Descriptor() ([]byte, []int) {
	return file_production_task_production_task_proto_rawDescGZIP(), []int{0}
}

func (x *RequestTaskParams) GetPartName() string {
	if x != nil {
		return x.PartName
	}
	return ""
}

func (x *RequestTaskParams) GetSklId() int32 {
	if x != nil {
		return x.SklId
	}
	return 0
}

func (x *RequestTaskParams) GetDateStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *RequestTaskParams) GetDateEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

func (x *RequestTaskParams) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *RequestTaskParams) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestTaskParams) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Product struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ManufacturingDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=manufacturing_date,json=manufacturingDate,proto3" json:"manufacturing_date,omitempty"`
	Nomenclature       string                 `protobuf:"bytes,3,opt,name=nomenclature,proto3" json:"nomenclature,omitempty"`
	NumberFrame        string                 `protobuf:"bytes,4,opt,name=number_frame,json=numberFrame,proto3" json:"number_frame,omitempty"`
	PartName           string                 `protobuf:"bytes,5,opt,name=part_name,json=partName,proto3" json:"part_name,omitempty"`
	CountSausageSticks float64                `protobuf:"fixed64,6,opt,name=count_sausage_sticks,json=countSausageSticks,proto3" json:"count_sausage_sticks,omitempty"`
	WeightSpKg         float64                `protobuf:"fixed64,7,opt,name=weight_sp_kg,json=weightSpKg,proto3" json:"weight_sp_kg,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Product) Reset() {
	*x = Product{}
	mi := &file_production_task_production_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_production_task_production_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_production_task_production_task_proto_rawDescGZIP(), []int{1}
}

func (x *Product) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Product) GetManufacturingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ManufacturingDate
	}
	return nil
}

func (x *Product) GetNomenclature() string {
	if x != nil {
		return x.Nomenclature
	}
	return ""
}

func (x *Product) GetNumberFrame() string {
	if x != nil {
		return x.NumberFrame
	}
	return ""
}

func (x *Product) GetPartName() string {
	if x != nil {
		return x.PartName
	}
	return ""
}

func (x *Product) GetCountSausageSticks() float64 {
	if x != nil {
		return x.CountSausageSticks
	}
	return 0
}

func (x *Product) GetWeightSpKg() float64 {
	if x != nil {
		return x.WeightSpKg
	}
	return 0
}

type ProductsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Product             `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	TotalPage     int32                  `protobuf:"varint,2,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductsResponse) Reset() {
	*x = ProductsResponse{}
	mi := &file_production_task_production_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsResponse) ProtoMessage() {}

func (x *ProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_production_task_production_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsResponse.ProtoReflect.Descriptor instead.
func (*ProductsResponse) Descriptor() ([]byte, []int) {
	return file_production_task_production_task_proto_rawDescGZIP(), []int{2}
}

func (x *ProductsResponse) GetData() []*Product {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProductsResponse) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type IDsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDsRequest) Reset() {
	*x = IDsRequest{}
	mi := &file_production_task_production_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsRequest) ProtoMessage() {}

func (x *IDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_production_task_production_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsRequest.ProtoReflect.Descriptor instead.
func (*IDsRequest) Descriptor() ([]byte, []int) {
	return file_production_task_production_task_proto_rawDescGZIP(), []int{3}
}

func (x *IDsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EmptyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	mi := &file_production_task_production_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_production_task_production_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_production_task_production_task_proto_rawDescGZIP(), []int{4}
}

var File_production_task_production_task_proto protoreflect.FileDescriptor

var file_production_task_production_task_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x6b, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6b,
	0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73,
	0x70, 0x5f, 0x6b, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x70, 0x4b, 0x67, 0x22, 0x5f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe4, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x4d, 0x73,
	0x53, 0x51, 0x4c, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x53,
	0x51, 0x4c, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x2a, 0x5a, 0x28, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_production_task_production_task_proto_rawDescOnce sync.Once
	file_production_task_production_task_proto_rawDescData []byte
)

func file_production_task_production_task_proto_rawDescGZIP() []byte {
	file_production_task_production_task_proto_rawDescOnce.Do(func() {
		file_production_task_production_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_production_task_production_task_proto_rawDesc), len(file_production_task_production_task_proto_rawDesc)))
	})
	return file_production_task_production_task_proto_rawDescData
}

var file_production_task_production_task_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_production_task_production_task_proto_goTypes = []any{
	(*RequestTaskParams)(nil),     // 0: production_task.RequestTaskParams
	(*Product)(nil),               // 1: production_task.Product
	(*ProductsResponse)(nil),      // 2: production_task.ProductsResponse
	(*IDsRequest)(nil),            // 3: production_task.IDsRequest
	(*EmptyResponse)(nil),         // 4: production_task.EmptyResponse
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_production_task_production_task_proto_depIdxs = []int32{
	5, // 0: production_task.RequestTaskParams.date_start:type_name -> google.protobuf.Timestamp
	5, // 1: production_task.RequestTaskParams.date_end:type_name -> google.protobuf.Timestamp
	5, // 2: production_task.Product.manufacturing_date:type_name -> google.protobuf.Timestamp
	1, // 3: production_task.ProductsResponse.data:type_name -> production_task.Product
	0, // 4: production_task.ProductionTaskService.GetTasks:input_type -> production_task.RequestTaskParams
	0, // 5: production_task.ProductionTaskService.GetTasksInPartName:input_type -> production_task.RequestTaskParams
	3, // 6: production_task.ProductionTaskService.RecordInMsSQL:input_type -> production_task.IDsRequest
	3, // 7: production_task.ProductionTaskService.RecordOutMsSQL:input_type -> production_task.IDsRequest
	2, // 8: production_task.ProductionTaskService.GetTasks:output_type -> production_task.ProductsResponse
	2, // 9: production_task.ProductionTaskService.GetTasksInPartName:output_type -> production_task.ProductsResponse
	4, // 10: production_task.ProductionTaskService.RecordInMsSQL:output_type -> production_task.EmptyResponse
	4, // 11: production_task.ProductionTaskService.RecordOutMsSQL:output_type -> production_task.EmptyResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_production_task_production_task_proto_init() }
func file_production_task_production_task_proto_init() {
	if File_production_task_production_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_production_task_production_task_proto_rawDesc), len(file_production_task_production_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_production_task_production_task_proto_goTypes,
		DependencyIndexes: file_production_task_production_task_proto_depIdxs,
		MessageInfos:      file_production_task_production_task_proto_msgTypes,
	}.Build()
	File_production_task_production_task_proto = out.File
	file_production_task_production_task_proto_goTypes = nil
	file_production_task_production_task_proto_depIdxs = nil
}
