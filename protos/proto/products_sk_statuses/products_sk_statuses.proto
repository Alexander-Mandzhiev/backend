syntax = "proto3";

package products_sk_statuses;
option go_package = "products_sk_statuses_local.v1;products_sk_statuses";

import "google/protobuf/timestamp.proto";

// Связь продукта со статусами
message ProductSkStatusResponse {
  int64 product_id = 1;
  int32 status_id = 2;
  bool active = 3; // Активный статус
  google.protobuf.Timestamp created_at = 4;
}

// CRUD методы для статусов продукции
service ProductStatusService {
  rpc Create(CreateProductStatusRequest) returns (ProductSkStatusResponse);
  rpc ProductSkStatus(GetProductStatusRequest) returns (ProductSkStatusResponse);
  rpc Update(UpdateProductStatusRequest) returns (ProductSkStatusResponse);
  rpc Delete(DeleteProductStatusRequest) returns (DeleteProductStatusResponse);
  rpc List(ListProductStatusesRequest) returns (ProductStatusListResponse);
}

// Запрос на создание статуса продукции
message CreateProductStatusRequest {
  int64 product_id = 1;
  int32 status_id = 2;
}

// Запрос на получение статуса продукции
message GetProductStatusRequest {
  int64 product_id = 1;
  int32 status_id = 2;
}

// Запрос на обновление статуса продукции
message UpdateProductStatusRequest {
  int64 product_id = 1;
  int32 status_id = 2;
  bool active = 3;
}

// Запрос на удаление статуса продукции
message DeleteProductStatusRequest {
  int64 product_id = 1;
  int32 status_id = 2;
}
message DeleteProductStatusResponse {
  bool success = 1; // true, если удаление успешно
}

// Пустой запрос для получения списка статусов продукции
message ListProductStatusesRequest {}
message ProductStatusListResponse {
  repeated ProductSkStatusResponse data = 1;
}