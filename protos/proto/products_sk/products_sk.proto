syntax = "proto3";

package products_sk;
option go_package = "products_sk_local.v1;products_sk";

import "google/protobuf/timestamp.proto";

// Продукция
message ProductResponse {
  int64 id = 1;
  string part_name = 2;
  string nomenclature = 3;
  int32 number_frame = 4;
  float weight_sp_kg = 5; // Начальный вес
  float weight_gp_kg = 6; // Готовый вес
  google.protobuf.Timestamp manufacturing_date = 7;
}

// CRUD методы для продукции
service ProductService {
  rpc Create(CreateProductRequest) returns (ProductResponse);
  rpc Product(GetProductRequest) returns (ProductResponse);
  rpc Update(UpdateProductRequest) returns (ProductResponse);
  rpc Delete(DeleteProductRequest) returns (DeleteProductResponse);
  rpc List(ListProductsRequest) returns (ProductListResponse);
}

// Запрос на создание продукции
message CreateProductRequest {
  string part_name = 1;
  string nomenclature = 2;
  int32 number_frame = 3;
  float weight_sp_kg = 4;
  float weight_gp_kg = 5;
  google.protobuf.Timestamp manufacturing_date = 6;
  float current_weight_kg = 7;
}

// Запрос на получение продукции
message GetProductRequest {
  int64 id = 1;
}

// Запрос на обновление продукции
message UpdateProductRequest {
  int64 id = 1;
  string part_name = 2;
  string nomenclature = 3;
  int32 number_frame = 4;
  float weight_sp_kg = 5;
  float weight_gp_kg = 6;
  google.protobuf.Timestamp manufacturing_date = 7;
  float current_weight_kg = 8;
}

// Запрос на удаление продукции
message DeleteProductRequest {
  int64 id = 1;
}
message DeleteProductResponse {
  bool success = 1;
}

// Пустой запрос для получения списка продукции
message ListProductsRequest {}
message ProductListResponse {
  repeated ProductResponse products = 1;
}
