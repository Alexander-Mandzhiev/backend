syntax = "proto3";

package movements;
option go_package = "movements_local.v1;movements";

import "google/protobuf/timestamp.proto";

// Перемещение продукции
message MovementResponse {
  int64 id = 1;
  int64 product_id = 2;
  int32 from_location_id = 3;
  int32 to_location_id = 4;
  int32 user_id = 5;
  string comment = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp removed_at = 8;
}


// CRUD методы для перемещений
service MovementService {
  rpc Create(CreateMovementRequest) returns (MovementResponse);
  rpc Movement(GetMovementRequest) returns (MovementResponse);
  rpc Update(UpdateMovementRequest) returns (MovementResponse);
  rpc Delete(DeleteMovementRequest) returns (DeleteMovementResponse);
  rpc List(ListMovementsRequest) returns (MovementListResponse);
}

// Запрос на создание перемещения
message CreateMovementRequest {
  int64 product_id = 1;
  int32 from_location_id = 2;
  int32 to_location_id = 3;
  int32 user_id = 4;
  string comment = 5;
}

// Запрос на получение перемещения
message GetMovementRequest {
  int64 id = 1;
}

// Запрос на обновление перемещения
message UpdateMovementRequest {
  int64 id = 1;
  int64 product_id = 2;
  int32 from_location_id = 3;
  int32 to_location_id = 4;
  int32 user_id = 5;
  string comment = 6;
}

message DeleteMovementRequest {
  int64 id = 1;
}
message DeleteMovementResponse {
  bool success = 1; // true, если удаление успешно
}

// Пустой запрос и ответ для получения списка перемещений
message ListMovementsRequest {}
message MovementListResponse {
  repeated MovementResponse movements = 1;
}