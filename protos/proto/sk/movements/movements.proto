syntax = "proto3";

package sk.movements;
option go_package = "sk.v1;movements";

import "google/protobuf/timestamp.proto";

// Перемещение продукции
message MovementResponse {
  int64 id = 1;
  int64 product_id = 2;
  optional int32 from_location_id = 3;  // NULL если отсутствует
  optional int32 to_location_id = 4;    // NULL если отсутствует
  int32 user_id = 5;
  optional string comment = 6;          // NULL если отсутствует
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  optional google.protobuf.Timestamp removed_at = 9; // NULL если не удалено
}

// CRUD методы для перемещений
service MovementService {
  rpc CreateMovement(CreateMovementRequest) returns (MovementResponse);
  rpc GetMovement(GetMovementRequest) returns (MovementResponse);
  rpc UpdateMovement(UpdateMovementRequest) returns (MovementResponse);
  rpc DeleteMovement(DeleteMovementRequest) returns (DeleteMovementResponse);
  rpc ListMovements(ListMovementsRequest) returns (MovementListResponse);
  rpc InitializeProduct(InitializeProductRequest) returns (InitializeProductResponse);

}

// Запрос на создание перемещения
message CreateMovementRequest {
  int64 product_id = 1;                 // Обязательное поле
  optional int32 from_location_id = 2;  // Опционально (NULL)
  optional int32 to_location_id = 3;    // Опционально (NULL)
  int32 user_id = 4;                    // Обязательное поле
  optional string comment = 5;          // Опционально (NULL)
  int32 status_id = 6;
}

message UpdateMovementRequest {
  int64 id = 1;
  int64 product_id = 2;
  int32 from_location_id = 3;
  int32 to_location_id = 4;
  int32 user_id = 5;
  string comment = 6;
}

message ListMovementsRequest {
  int64 product_id = 1;        // Фильтр по продукту (опционально)
  optional int32 location_id = 2;       // Фильтр по любой локации (from/to)
}

message GetMovementRequest {  int64 id = 1;}
message DeleteMovementRequest {  int64 id = 1;}
message DeleteMovementResponse {  bool success = 1;}

message MovementListResponse {  repeated MovementResponse data = 1;}

message CreateProductRequest {
  string part_name = 1;
  string nomenclature = 2;
  int32 number_frame = 3;
  optional int32 count_sausage_sticks = 4;
  double weight_sp_kg = 5;
  optional double weight_gp_kg = 6;
  google.protobuf.Timestamp manufacturing_date = 7;
}

message InitializeProductRequest {
  repeated CreateProductRequest data = 1;  // Создаваемые продукты
  int32 to_location_id = 2;                // Целевая локация
  int32 user_id = 3;                       // Пользователь
  string comment = 4;                      // Комментарий к движению
  int32 status_id = 5;                     // Статус продукта
}

message InitializeProductResponse {
  repeated ProductResponse created_products = 1;  // Успех
  repeated ProductCreationError errors = 2;       // Ошибки
}

message ProductCreationError {
  int32 data_index = 1;
  string error_message = 2;
}

message ProductResponse {
  int64 id = 1;
  string part_name = 2;
  string nomenclature = 3;
  int32 number_frame = 4;
  optional int32 count_sausage_sticks = 5;
  double weight_sp_kg = 6;
  optional double weight_gp_kg = 7;
  google.protobuf.Timestamp manufacturing_date = 8;
  google.protobuf.Timestamp created_at = 9;
  optional google.protobuf.Timestamp removed_at = 10;
}